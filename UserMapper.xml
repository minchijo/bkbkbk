<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bookbookbook.dao.UserDAO">

	<!--회원가입-->
	<insert id="registerUser" parameterType="UserVO">
    	INSERT INTO users (
        	userId,  password, userName, userTel, 
        	gender, birthDate, joinedDate) 
    	VALUES (
        	#{userId}, #{password}, #{userName}, #{userTel},
        	#{gender}, #{birthDate}, now() )
	</insert>

	<!-- 로그인 -->
	<select id="loginUser" parameterType="String" resultType="UserVO">
        SELECT * FROM users WHERE userId = #{userId}
    </select>

	
    <select id="findEmail" resultType="String">
        SELECT userId FROM users 
        WHERE userName = #{userName} AND userTel = #{userTel}
    </select>
    
   
	<!--채팅-->
	<insert id="submitReport" parameterType="ReportVO">
		INSERT INTO report 
			(chatroomNum, reportedUser, reportTime, reportType, reportUser) 
		VALUES 
			(#{chatroomNum},#{reportedUser},${reportTime},#{reportType},#{reportUser})
	</insert>
	
	
	<!-- ################################### -->
	<!-- 나의 달력 -->
		<!-- 출석 정보 조회 -->
	<select id="getAttendancesByUserId" parameterType="String"
			resultType="CalendarVO">
		SELECT *
		FROM	calendar
		WHERE userNum = (
						SELECT userNum 
						FROM users 
						WHERE userId = #{userId}
						)
	</select>
		<!-- 메모 정보 조회 -->
	<select id="getMemosAtCalendar" parameterType="String"
			resultType="HashMap">
		SELECT 	m.*,
				b.bookTitle
		FROM	memo m
				INNER JOIN bookShelf bs 
					ON	m.shelfNum = bs.shelfNum
				INNER JOIN book b
					ON	bs.bookNum = b.bookNum
		WHERE m.userNum = (
						SELECT userNum 
						FROM users 
						WHERE userId = #{userId}
						)
	</select>
	
		<!-- 출석체크 기록 저장 -->
	<insert id="insertAttendance" parameterType="String">
	    INSERT INTO calendar (userNum, attendance, calendarDate)
	    SELECT 
	        u.userNum, 
	        true, 
	        CURDATE()
	    FROM 
	        users u
	    WHERE 
	        u.userId = #{userId}
	        AND NOT EXISTS (
	            SELECT 1 
	            FROM calendar c 
	            WHERE c.userNum = u.userNum 
	            AND DATE(c.calendarDate) = CURDATE()
	        )
	    ON DUPLICATE KEY UPDATE 
	        attendance = calendar.attendance
	</insert>
		<!-- 달력 테이블에서 userNum이 가진 출석 정보 조회 -->
	<select id="getAttendanceList" parameterType="String"
			resultType="calendarVO">
		SELECT 	c.calendarNum,
				c.userNum,
				c.attendance,
				c.calendarDate
		FROM 	calendar c
			INNER JOIN users u
			ON	c.userNum = u.userNum
		WHERE u.userId = #{userId}
		ORDER BY c.calendarDate	
	</select>
	
	<!-- ################################### -->
	<!-- 나의 메모 -->
		<!-- 메모 정보 조회 -->
	<select id="getMemosAtMemo" parameterType="String"
			resultType="HashMap">
		SELECT	m.*,
				bs.*,
				b.*
		FROM	memo m
				INNER JOIN (
 							 	SELECT shelfNum, 
 							 		MAX(memoDate) as latest_memo_date, 
 							 		MAX(memoNum) as latest_memo_num
  								FROM memo
  								WHERE userNum = (
  													SELECT userNum 
  													FROM users 
  													WHERE userId = #{userId}
  												)
								GROUP BY shelfNum
							) 
				latest ON m.shelfNum = latest.shelfNum 
           				AND m.memoDate = latest.latest_memo_date 
           				AND m.memoNum = latest.latest_memo_num
				INNER JOIN bookshelf bs 
					ON m.shelfNum = bs.shelfNum
				INNER JOIN book b 
					ON bs.bookNum = b.bookNum
		ORDER BY m.memoDate DESC
	</select>
		<!-- 메모 상세 조회 -->
	<select id="getMemoDetailByMemoNum" parameterType="hashmap"
			resultType="hashmap">
		SELECT	m.*,
				b.*,
				bs.*
		FROM	memo m
				INNER JOIN bookShelf bs 
					ON	m.shelfNum = bs.shelfNum
				INNER JOIN book b
					ON	bs.bookNum = b.bookNum
		WHERE	m.shelfNum = #{shelfNum}	
				AND
				m.userNum = (
							SELECT userNum 
							FROM users 
							WHERE userId = #{userId}
							)
	</select>
	
		<!-- 메모 삭제 -->
	<delete id="memoDelete" parameterType="hashmap">
		DELETE FROM memo
		WHERE	memoNum = #{memoNum} 
				AND 
				userNum = (
							SELECT userNum 
							FROM users 
							WHERE userId = #{userId}
							)
	</delete>
	
		<!-- 메모 수정 -->
	<update id="updateMemo" parameterType="hashmap">
		UPDATE 	memo
		SET		memoContent = #{memoContent}
		WHERE	memoNum = #{memoNum}
				AND
				userNum = (
							SELECT userNum 
							FROM users 
							WHERE userId = #{userId}
							)
	</update>
		<!-- memo 테이블에서 shelfNum을 포함하는 레코드가 있는지 확인 -->
	<select id="countMemoForShelf" parameterType="hashmap"
			resultType="int">
		SELECT	COUNT(*)
		FROM	memo m
				INNER JOIN users u
				ON m.userNum = u.userNum
		WHERE	m.shelfNum = #{shelfNum}
				AND
				u.userId = #{userId}
	</select>
	
	<!-- ################################### -->
	<!-- 나의 캐릭터 -->
		<!-- userId로 userLevel에 따른 캐릭터 정보 조회 -->
	<select id="getCharactersByUserId" parameterType="String" 
		resultType="hashmap">
    	SELECT  u.userLevel, 
           		c.characterNum, 
           		c.characterName, 
           		c.cfrealname, 
           		c.cfname,
           		c.characterHeight
    	FROM users u
    		INNER JOIN characters c
    	WHERE u.userId = #{userId}
    	ORDER BY c.characterNum
	</select>
	
		<!-- 캐릭터 상세보기 -->
	<select id="myCharactersDetail" parameterType="hashmap"
			resultType="hashmap">
		SELECT 	u.userLevel,
				c.characterNum,
				c.characterName,
				c.cfrealname,
				c.cfname,
				c.characterHeight,
				c.characterDescription
		FROM users u
			INNER JOIN characters c
		ON u.userLevel >= c.characterNum
		WHERE c.characterNum = #{stage} 
			AND u.userId = #{userId}
	</select>

</mapper>
